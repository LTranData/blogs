"use strict";(self.webpackChunklamtran_blog=self.webpackChunklamtran_blog||[]).push([[4821],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>u});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(a),m=r,u=d["".concat(s,".").concat(m)]||d[m]||h[m]||l;return a?n.createElement(u,i(i({ref:t},p),{},{components:a})):n.createElement(u,i({ref:t},p))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:r,i[1]=o;for(var c=2;c<l;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},9859:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const l={slug:"db-schemachange/",title:"db-schemachange",description:"db-schemachange",authors:"tranlam",tags:["Databases","Cloud","Data Platform","Database Change Management"],image:"./images/flyway-naming-convention.png"},i=void 0,o={permalink:"/blog/db-schemachange/",editUrl:"https://github.com/LTranData/blogs/edit/main/blog/2025-07-13-db-schemachange/index.md",source:"@site/blog/2025-07-13-db-schemachange/index.md",title:"db-schemachange",description:"db-schemachange",date:"2025-07-13T00:00:00.000Z",formattedDate:"July 13, 2025",tags:[{label:"Databases",permalink:"/blog/tags/databases"},{label:"Cloud",permalink:"/blog/tags/cloud"},{label:"Data Platform",permalink:"/blog/tags/data-platform"},{label:"Database Change Management",permalink:"/blog/tags/database-change-management"}],readingTime:15.475,truncated:!0,authors:[{name:"Lam Tran",title:"Data Engineer",url:"https://github.com/LTranData",imageURL:"https://github.com/LTranData.png",key:"tranlam"}],frontMatter:{slug:"db-schemachange/",title:"db-schemachange",description:"db-schemachange",authors:"tranlam",tags:["Databases","Cloud","Data Platform","Database Change Management"],image:"./images/flyway-naming-convention.png"},nextItem:{title:"Cloud Native Data Platform",permalink:"/blog/cloud-native-data-platform/"}},s={image:a(1494).Z,authorsImageUrls:[void 0]},c=[{value:"Installation options",id:"installation-options",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"Change Scripts",id:"change-scripts",level:2},{value:"Versioned Script Naming",id:"versioned-script-naming",level:3},{value:"Repeatable Script Naming",id:"repeatable-script-naming",level:3},{value:"Always Script Naming",id:"always-script-naming",level:3},{value:"Script Requirements",id:"script-requirements",level:3},{value:"Using Variables in Scripts",id:"using-variables-in-scripts",level:3},{value:"Secrets filtering",id:"secrets-filtering",level:4},{value:"Jinja templating engine",id:"jinja-templating-engine",level:3},{value:"Change History Table",id:"change-history-table",level:2},{value:"Configuration",id:"configuration",level:2},{value:"db-schemachange configuration",id:"db-schemachange-configuration",level:3},{value:"CLI usage",id:"cli-usage",level:4},{value:"deploy",id:"deploy",level:5},{value:"render",id:"render",level:5},{value:"YAML config file",id:"yaml-config-file",level:4},{value:"connections-config.yml",id:"connections-configyml",level:3},{value:"Authentication",id:"authentication",level:2},{value:"Databricks",id:"databricks",level:3},{value:"MySQL",id:"mysql",level:3},{value:"Oracle",id:"oracle",level:3},{value:"Postgres",id:"postgres",level:3},{value:"Snowflake",id:"snowflake",level:3},{value:"SQL Server",id:"sql-server",level:3},{value:"Yaml Jinja support",id:"yaml-jinja-support",level:2},{value:"env_var",id:"env_var",level:3},{value:"Running schemachange",id:"running-schemachange",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Running the Script",id:"running-the-script",level:3},{value:"Using Docker",id:"using-docker",level:3},{value:"Maintainers",id:"maintainers",level:2},{value:"Demo",id:"demo",level:2},{value:"GitHub",id:"github",level:2}],p={toc:c};function d(e){let{components:t,...l}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"db-schemachange")," is a simple, lightweight python based tool to manage database objects for Databricks, Snowflake, MySQL, Postgres, SQL Server, and Oracle. It\nfollows an Imperative-style approach to Database Change Management (DCM) and was inspired by\nthe ",(0,r.kt)("a",{parentName:"p",href:"https://flywaydb.org"},"Flyway database migration tool"),". When combined with a version control system and a CI/CD\ntool, database changes can be approved and deployed through a pipeline using modern software delivery practices. As such\nschemachange plays a critical role in enabling Database (or Data) DevOps."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"banner image",src:a(1494).Z,width:"682",height:"320"})),(0,r.kt)("h2",{id:"installation-options"},"Installation options"),(0,r.kt)("p",null,"You can install the ",(0,r.kt)("inlineCode",{parentName:"p"},"db-schemachange")," package with all available connectors, or you can choose a specific one that suits your needs for a lighter installation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'pip install --upgrade db-schemachange # Install the package WITHOUT connectors\npip install --upgrade "db-schemachange[all]" # Install the package with all connectors\npip install --upgrade "db-schemachange[postgres]" # Install the package with Postgres connector\npip install --upgrade "db-schemachange[sqlserver]" # Install the package with SQL Server connector\npip install --upgrade "db-schemachange[mysql]" # Install the package with MySQL connector\npip install --upgrade "db-schemachange[oracle]" # Install the package with Oracle connector\npip install --upgrade "db-schemachange[snowflake]" # Install the package with Snowflake connector\npip install --upgrade "db-schemachange[databricks]" # Install the package with Databricks connector\n')),(0,r.kt)("h2",{id:"project-structure"},"Project Structure"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(project_root)\n|\n|-- folder_1\n    |-- V1.1.1__first_change.sql\n    |-- V1.1.2__second_change.sql\n    |-- R__sp_add_sales.sql\n    |-- R__fn_get_timezone.sql\n|-- folder_2\n    |-- folder_3\n        |-- V1.1.3__third_change.sql\n        |-- R__fn_sort_ascii.sql\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"db-schemachange")," folder structure is very flexible. The ",(0,r.kt)("inlineCode",{parentName:"p"},"project_root")," folder is specified with the ",(0,r.kt)("inlineCode",{parentName:"p"},"-f"),"\nor ",(0,r.kt)("inlineCode",{parentName:"p"},"--root-folder")," argument. ",(0,r.kt)("inlineCode",{parentName:"p"},"db-schemachange")," only pays attention to the filenames, not the paths. Therefore, under\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"project_root")," folder you are free to arrange the change scripts any way you see fit. You can have as many\nsubfolders (and nested subfolders) as you would like."),(0,r.kt)("h2",{id:"change-scripts"},"Change Scripts"),(0,r.kt)("h3",{id:"versioned-script-naming"},"Versioned Script Naming"),(0,r.kt)("p",null,"Versioned change scripts follow a similar naming convention to that used\nby ",(0,r.kt)("a",{parentName:"p",href:"https://flywaydb.org/documentation/migrations#versioned-migrations"},"Flyway Versioned Migrations"),". The script name\nmust follow this pattern (image taken\nfrom ",(0,r.kt)("a",{parentName:"p",href:"https://flywaydb.org/documentation/migrations#versioned-migrations"},"Flyway docs"),"):"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Flyway naming conventions",src:a(1494).Z,width:"682",height:"320"})),(0,r.kt)("p",null,"With the following rules for each part of the filename:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Prefix"),": The letter 'V' for versioned change"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Version"),": A unique version number with dots or underscores separating as many number parts as you like"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Separator"),": ","_","_"," (two underscores)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Description"),": An arbitrary description with words separated by underscores or spaces (can not include two\nunderscores)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Suffix"),": .sql or .sql.jinja")),(0,r.kt)("p",null,"For example, a script name that follows this convention is: ",(0,r.kt)("inlineCode",{parentName:"p"},"V1.1.1__first_change.sql"),". As with Flyway, the unique\nversion string is very flexible. You just need to be consistent and always use the same convention, like 3 sets of\nnumbers separated by periods. Here are a few valid version strings:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"1.1"),(0,r.kt)("li",{parentName:"ul"},"1_1"),(0,r.kt)("li",{parentName:"ul"},"1.2.3"),(0,r.kt)("li",{parentName:"ul"},"1_2_3")),(0,r.kt)("p",null,"Every script within a database folder must have a unique version number. ",(0,r.kt)("inlineCode",{parentName:"p"},"db-schemachange")," will check for duplicate version\nnumbers and throw an error if it finds any. This helps to ensure that developers who are working in parallel don't\naccidentally (re-)use the same version number."),(0,r.kt)("h3",{id:"repeatable-script-naming"},"Repeatable Script Naming"),(0,r.kt)("p",null,"Repeatable change scripts follow a similar naming convention to that used\nby ",(0,r.kt)("a",{parentName:"p",href:"https://flywaydb.org/documentation/concepts/migrations.html#repeatable-migrations"},"Flyway Versioned Migrations"),". The\nscript name must follow this pattern (image taken\nfrom ",(0,r.kt)("a",{parentName:"p",href:"https://flywaydb.org/documentation/concepts/migrations.html#repeatable-migrations"},"Flyway docs"),":"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Flyway naming conventions repeatable",src:a(3156).Z,width:"713",height:"375"})),(0,r.kt)("p",null,"e.g:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"R","_","_","sp_add_sales.sql"),(0,r.kt)("li",{parentName:"ul"},"R","_","_","fn_get_timezone.sql"),(0,r.kt)("li",{parentName:"ul"},"R","_","_","fn_sort_ascii.sql")),(0,r.kt)("p",null,"All repeatable change scripts are applied each time the utility is run, if there is a change in the file.\nRepeatable scripts could be used for maintaining code that always needs to be applied in its entirety. e.g. stores\nprocedures, functions and view definitions etc."),(0,r.kt)("p",null,"Just like Flyway, within a single migration run, repeatable scripts are always applied after all pending versioned\nscripts have been executed. Repeatable scripts are applied in alphabetical order of their description."),(0,r.kt)("h3",{id:"always-script-naming"},"Always Script Naming"),(0,r.kt)("p",null,"Always change scripts are executed with every run of ",(0,r.kt)("inlineCode",{parentName:"p"},"db-schemachange"),". This is an addition to the implementation\nof ",(0,r.kt)("a",{parentName:"p",href:"https://flywaydb.org/documentation/concepts/migrations.html#repeatable-migrations"},"Flyway Versioned Migrations"),".\nThe script name must follow this pattern:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"A__Some_description.sql")),(0,r.kt)("p",null,"e.g."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A","_","_","add_user.sql"),(0,r.kt)("li",{parentName:"ul"},"A","_","_","assign_roles.sql")),(0,r.kt)("p",null,"This type of change script is useful for an environment set up after cloning. Always scripts are applied always last."),(0,r.kt)("h3",{id:"script-requirements"},"Script Requirements"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"db-schemachange")," is designed to be very lightweight and not impose too many limitations. Each change script can have any\nnumber of SQL statements within it and must supply the necessary context, like catalog/database and schema names. ",(0,r.kt)("inlineCode",{parentName:"p"},"db-schemachange"),' will simply run the contents of each script against\nthe target database, in the correct order. After each script, Schemachange will execute "reset" the context (catalog/database, schema) to the values used to configure the connector.'),(0,r.kt)("h3",{id:"using-variables-in-scripts"},"Using Variables in Scripts"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"db-schemachange")," supports the jinja engine for a variable replacement strategy. One important use of variables is to support\nmultiple environments (dev, test, prod) in a single database by dynamically changing the database name during\ndeployment. To use a variable in a change script, use this syntax anywhere in the script: ",(0,r.kt)("inlineCode",{parentName:"p"},"{{ variable1 }}"),"."),(0,r.kt)("p",null,"To pass variables to ",(0,r.kt)("inlineCode",{parentName:"p"},"db-schemachange"),", check out the ",(0,r.kt)("a",{parentName:"p",href:"#configuration"},"Configuration")," section below. You can either use\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"--vars")," command line parameter or the YAML config file ",(0,r.kt)("inlineCode",{parentName:"p"},"schemachange-config.yml"),". For the command line version you\ncan pass variables like this: ",(0,r.kt)("inlineCode",{parentName:"p"},'--vars \'{"variable1": "value", "variable2": "value2"}\''),". This parameter accepts a flat\nJSON object formatted as a string."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("em",{parentName:"p"},"Nested objects and arrays don't make sense at this point and aren't supported."))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"db-schemachange")," will replace any variable placeholders before running your change script code and will throw an error if it\nfinds any variable placeholders that haven't been replaced."),(0,r.kt)("h4",{id:"secrets-filtering"},"Secrets filtering"),(0,r.kt)("p",null,"While many CI/CD tools already have the capability to filter secrets, it is best that any tool also does not output\nsecrets to the console or logs. Schemachange implements secrets filtering in a number of areas to ensure secrets are not\nwriten to the console or logs. The only exception is the ",(0,r.kt)("inlineCode",{parentName:"p"},"render")," command which will display secrets."),(0,r.kt)("p",null,"A secret is just a standard variable that has been tagged as a secret. This is determined using a naming convention and\neither of the following will tag a variable as a secret:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The variable name has the word ",(0,r.kt)("inlineCode",{parentName:"li"},"secret")," in it.",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"config-version: 1\nvars:\n  bucket_name: S3://...... # not a secret\n  secret_key: 567576D8E # a secret\n"))),(0,r.kt)("li",{parentName:"ol"},"The variable is a child of a key named ",(0,r.kt)("inlineCode",{parentName:"li"},"secrets"),".",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"config-version: 1\nvars:\nsecrets:\n  my_key: 567576D8E # a secret\naws:\n  bucket_name: S3://...... # not a secret\n  secrets:\n    encryption_key: FGDSUUEHDHJK # a secret\n    us_east_1:\n      encryption_key: sdsdsd # a secret\n")))),(0,r.kt)("h3",{id:"jinja-templating-engine"},"Jinja templating engine"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"db-schemachange")," uses the Jinja templating engine internally and\nsupports: ",(0,r.kt)("a",{parentName:"p",href:"https://jinja.palletsprojects.com/en/3.0.x/templates/#expressions"},"expressions"),", ",(0,r.kt)("a",{parentName:"p",href:"https://jinja.palletsprojects.com/en/3.0.x/templates/#macros"},"macros"),", ",(0,r.kt)("a",{parentName:"p",href:"https://jinja.palletsprojects.com/en/3.0.x/templates/#include"},"includes"),"\nand ",(0,r.kt)("a",{parentName:"p",href:"https://jinja.palletsprojects.com/en/3.0.x/templates/#template-inheritance"},"template inheritance"),"."),(0,r.kt)("p",null,"These files can be stored in the root-folder but ",(0,r.kt)("inlineCode",{parentName:"p"},"db-schemachange")," also provides a separate modules\nfolder ",(0,r.kt)("inlineCode",{parentName:"p"},"--modules-folder"),". This allows common logic to be stored outside of the main changes scripts."),(0,r.kt)("p",null,"The Jinja auto-escaping feature is disabled in ",(0,r.kt)("inlineCode",{parentName:"p"},"db-schemachange"),", this feature in Jinja is currently designed for where the\noutput language is HTML/XML. So if you are using ",(0,r.kt)("inlineCode",{parentName:"p"},"db-schemachange")," with untrusted inputs you will need to handle this within\nyour change scripts."),(0,r.kt)("h2",{id:"change-history-table"},"Change History Table"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"db-schemachange")," records all applied changes scripts to the change history table. By default, ",(0,r.kt)("inlineCode",{parentName:"p"},"db-schemachange")," will attempt to\nlog all activities to the ",(0,r.kt)("inlineCode",{parentName:"p"},"METADATA.[SCHEMACHANGE].CHANGE_HISTORY")," table, based on the database you are using. The name and location of the change history\ntable can be overriden via a command line argument (",(0,r.kt)("inlineCode",{parentName:"p"},"-c")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"--change-history-table"),") or the ",(0,r.kt)("inlineCode",{parentName:"p"},"schemachange-config.yml"),"\nfile (",(0,r.kt)("inlineCode",{parentName:"p"},"change-history-table"),'). The value passed to the parameter can have a one, two, or three part name (e.g. "\nTABLE_NAME", or "SCHEMA_NAME.TABLE_NAME", or " DATABASE_NAME.SCHEMA_NAME.TABLE_NAME"). This can be used to support\nmultiple environments (dev, test, prod).'),(0,r.kt)("p",null,"By default, ",(0,r.kt)("inlineCode",{parentName:"p"},"db-schemachange")," will not try to create the change history table, and it will fail if the table does not exist.\nThis behavior can be altered by passing in the ",(0,r.kt)("inlineCode",{parentName:"p"},"--create-change-history-table")," argument or adding\n",(0,r.kt)("inlineCode",{parentName:"p"},"create-change-history-table: true")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"schemachange-config.yml")," file. Even with the ",(0,r.kt)("inlineCode",{parentName:"p"},"--create-change-history-table"),"\nparameter, ",(0,r.kt)("inlineCode",{parentName:"p"},"db-schemachange")," will not attempt to create the database for the change history table. That must be created\nbefore running ",(0,r.kt)("inlineCode",{parentName:"p"},"db-schemachange"),"."),(0,r.kt)("p",null,"The structure of the ",(0,r.kt)("inlineCode",{parentName:"p"},"CHANGE_HISTORY")," table is as follows:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Column Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"VERSION"),(0,r.kt)("td",{parentName:"tr",align:null},"VARCHAR(1000)"),(0,r.kt)("td",{parentName:"tr",align:null},"1.1.1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DESCRIPTION"),(0,r.kt)("td",{parentName:"tr",align:null},"VARCHAR(1000)"),(0,r.kt)("td",{parentName:"tr",align:null},"First change")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SCRIPT"),(0,r.kt)("td",{parentName:"tr",align:null},"VARCHAR(1000)"),(0,r.kt)("td",{parentName:"tr",align:null},"V1.1.1","_","_","first_change.sql")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SCRIPT_TYPE"),(0,r.kt)("td",{parentName:"tr",align:null},"VARCHAR(1000)"),(0,r.kt)("td",{parentName:"tr",align:null},"V")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CHECKSUM"),(0,r.kt)("td",{parentName:"tr",align:null},"VARCHAR(1000)"),(0,r.kt)("td",{parentName:"tr",align:null},"38e5ba03b1a6d2...")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"EXECUTION_TIME"),(0,r.kt)("td",{parentName:"tr",align:null},"BIGINT"),(0,r.kt)("td",{parentName:"tr",align:null},"4")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"STATUS"),(0,r.kt)("td",{parentName:"tr",align:null},"VARCHAR(1000)"),(0,r.kt)("td",{parentName:"tr",align:null},"Success")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"INSTALLED_BY"),(0,r.kt)("td",{parentName:"tr",align:null},"VARCHAR(1000)"),(0,r.kt)("td",{parentName:"tr",align:null},"DATABASE_USER")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"INSTALLED_ON"),(0,r.kt)("td",{parentName:"tr",align:null},"TIMESTAMP"),(0,r.kt)("td",{parentName:"tr",align:null},"2020-03-17 12:54:33.123")))),(0,r.kt)("p",null,"A new row will be added to this table every time a change script has been applied to the database. ",(0,r.kt)("inlineCode",{parentName:"p"},"db-schemachange")," will use\nthis table to identify which changes have been applied to the database and will not apply the same version more than\nonce."),(0,r.kt)("p",null,"Here is the current schema DDL for the change history table (found in the ",(0,r.kt)("inlineCode",{parentName:"p"},"schemachange/cli.py")," script), in case you choose to create it manually and not use the ",(0,r.kt)("inlineCode",{parentName:"p"},"--create-change-history-table")," parameter:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS METADATA.[SCHEMACHANGE].CHANGE_HISTORY\n(\n    VERSION VARCHAR(1000),\n    DESCRIPTION VARCHAR(1000),\n    SCRIPT VARCHAR(1000),\n    SCRIPT_TYPE VARCHAR(1000),\n    CHECKSUM VARCHAR(1000),\n    EXECUTION_TIME BIGINT,\n    STATUS VARCHAR(1000),\n    INSTALLED_BY VARCHAR(1000),\n    INSTALLED_ON TIMESTAMP\n)\n")),(0,r.kt)("h2",{id:"configuration"},"Configuration"),(0,r.kt)("h3",{id:"db-schemachange-configuration"},"db-schemachange configuration"),(0,r.kt)("p",null,"Schemachange-specific parameters can be supplied in two different ways (in order of priority):"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Command Line Arguments"),(0,r.kt)("li",{parentName:"ol"},"YAML config file")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"vars")," provided via command-line argument will be merged with vars provided via YAML config."),(0,r.kt)("h4",{id:"cli-usage"},"CLI usage"),(0,r.kt)("h5",{id:"deploy"},"deploy"),(0,r.kt)("p",null,"This is the main command that runs the deployment process."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"usage: schemachange deploy [-h] \\\n  [--config-folder CONFIG_FOLDER] \\\n  [--config-file-name CONFIG_FILE_NAME] \\\n  [-f ROOT_FOLDER] \\\n  [-m MODULES_FOLDER] \\\n  [--vars VARS] \\\n  [--db-type DB_TYPE] \\\n  [--connections-file-path CONNECTIONS_FILE_PATH] \\\n  [-c CHANGE_HISTORY_TABLE] \\\n  [--create-change-history-table] \\\n  [--query-tag QUERY_TAG] \\\n  [-v] \\\n  [-ac] \\\n  [--dry-run]\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-h, --help"),(0,r.kt)("td",{parentName:"tr",align:null},"Show the help message and exit")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"--config-folder CONFIG_FOLDER"),(0,r.kt)("td",{parentName:"tr",align:null},"The folder to look in for the schemachange config file (the default is the current working directory)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"--config-file-name CONFIG_FILE_NAME"),(0,r.kt)("td",{parentName:"tr",align:null},"The file name of the schemachange config file. (the default is schemachange-config.yml)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-f ROOT_FOLDER, --root-folder ROOT_FOLDER"),(0,r.kt)("td",{parentName:"tr",align:null},"The root folder for the database change scripts. The default is the current directory.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-m MODULES_FOLDER, --modules-folder MODULES_FOLDER"),(0,r.kt)("td",{parentName:"tr",align:null},"The modules folder for jinja macros and templates to be used across mutliple scripts")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"--vars VARS"),(0,r.kt)("td",{parentName:"tr",align:null},'Define values for the variables to replaced in change scripts, given in JSON format. Vars supplied via the command line will be merged with YAML-supplied vars (e.g. \'{"variable1": "value1", "variable2": "value2"}\')')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-v, --verbose"),(0,r.kt)("td",{parentName:"tr",align:null},"Display verbose debugging details during execution. The default is 'False'.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"--db-type"),(0,r.kt)("td",{parentName:"tr",align:null},"Database type to run schemachange against. Should be one of ","[DATABRICKS, MYSQL, ORACLE, POSTGRES, SNOWFLAKE, SQL_SERVER]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"--connections-file-path CONNECTIONS_FILE_PATH"),(0,r.kt)("td",{parentName:"tr",align:null},"YAML file for connection detail such as username, password, database,...")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-c CHANGE_HISTORY_TABLE, --change-history-table CHANGE_HISTORY_TABLE"),(0,r.kt)("td",{parentName:"tr",align:null},"Used to override the default name of the change history table (which is METADATA.","[SCHEMACHANGE]",".CHANGE_HISTORY)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"--create-change-history-table"),(0,r.kt)("td",{parentName:"tr",align:null},"Create the change history table if it does not exist. The default is 'False'.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-ac, --autocommit"),(0,r.kt)("td",{parentName:"tr",align:null},"Enable autocommit feature for DML commands. The default is 'False'.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"--dry-run"),(0,r.kt)("td",{parentName:"tr",align:null},"Run schemachange in dry run mode. The default is 'False'.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"--query-tag"),(0,r.kt)("td",{parentName:"tr",align:null},"A string to include in the QUERY_TAG that is attached to every SQL statement executed.")))),(0,r.kt)("h5",{id:"render"},"render"),(0,r.kt)("p",null,"This subcommand is used to render a single script to the console. It is intended to support the development and\ntroubleshooting of script that use features from the jinja template engine."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"usage: schemachange render [-h] \\\n  [--config-folder CONFIG_FOLDER] \\\n  [-f ROOT_FOLDER] \\\n  [-m MODULES_FOLDER] \\\n  [--vars VARS] \\\n  [-v] script\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"--config-folder CONFIG_FOLDER"),(0,r.kt)("td",{parentName:"tr",align:null},"The folder to look in for the schemachange-config.yml file (the default is the current working directory)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-f ROOT_FOLDER, --root-folder ROOT_FOLDER"),(0,r.kt)("td",{parentName:"tr",align:null},"The root folder for the database change scripts")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-m MODULES_FOLDER, --modules-folder MODULES_FOLDER"),(0,r.kt)("td",{parentName:"tr",align:null},"The modules folder for jinja macros and templates to be used across multiple scripts")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"--vars VARS"),(0,r.kt)("td",{parentName:"tr",align:null},'Define values for the variables to replaced in change scripts, given in JSON format (e.g. {"variable1": "value1", "variable2": "value2"})')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-v, --verbose"),(0,r.kt)("td",{parentName:"tr",align:null},"Display verbose debugging details during execution (the default is False)")))),(0,r.kt)("h4",{id:"yaml-config-file"},"YAML config file"),(0,r.kt)("p",null,"By default, Schemachange expects the YAML config file to be named ",(0,r.kt)("inlineCode",{parentName:"p"},"schemachange-config.yml"),", located in the current\nworking directory. The YAML file name can be overridden with the\n",(0,r.kt)("inlineCode",{parentName:"p"},"--config-file-name")," ",(0,r.kt)("a",{parentName:"p",href:"#cli-usage"},"command-line argument"),". The folder can be overridden by using the\n",(0,r.kt)("inlineCode",{parentName:"p"},"--config-folder")," ",(0,r.kt)("a",{parentName:"p",href:"#cli-usage"},"command-line argument")),(0,r.kt)("p",null,"Here is the list of available configurations in the ",(0,r.kt)("inlineCode",{parentName:"p"},"schemachange-config.yml")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'# Database type\ndb-type: MYSQL\n\n# Path to connection detail file\nconnections-file-path: null\n\n# The root folder for the database change scripts\nroot-folder: "/path/to/folder"\n\n# The modules folder for jinja macros and templates to be used across multiple scripts.\nmodules-folder: null\n\n# Used to override the default name of the change history table (the default is METADATA.SCHEMACHANGE.CHANGE_HISTORY)\nchange-history-table: null\n\n# Create the change history schema and table, if they do not exist (the default is False)\ncreate-change-history-table: false\n\n# Define values for the variables to replaced in change scripts. vars supplied via the command line will be merged into YAML-supplied vars\nvars:\n  var1: "value1"\n  var2: "value2"\n  secrets:\n    var3: "value3" # This is considered a secret and will not be displayed in any output\n\n# Enable autocommit feature for DML commands (the default is False)\nautocommit: false\n\n# Display verbose debugging details during execution (the default is False)\nverbose: false\n\n# Run schemachange in dry run mode (the default is False)\ndry-run: false\n\n# A string to include in the QUERY_TAG that is attached to every SQL statement executed\nquery-tag: "QUERY_TAG"\n')),(0,r.kt)("h3",{id:"connections-configyml"},"connections-config.yml"),(0,r.kt)("p",null,"Connection detail of the database passed in ",(0,r.kt)("inlineCode",{parentName:"p"},"--connections-file-path")," CLI parameter or ",(0,r.kt)("inlineCode",{parentName:"p"},"connections-file-path")," property in YAML config file. Please refer to ",(0,r.kt)("a",{parentName:"p",href:"#authentication"},"Authentication")),(0,r.kt)("h2",{id:"authentication"},"Authentication"),(0,r.kt)("p",null,"Schemachange supports the many of the authentication methods supported by the each database connector.\nPlease see below sample YAML file to pass in ",(0,r.kt)("inlineCode",{parentName:"p"},"--connections-file-path")," parameter"),(0,r.kt)("h3",{id:"databricks"},"Databricks"),(0,r.kt)("p",null,"Allowed parameters in ",(0,r.kt)("a",{parentName:"p",href:"https://docs.databricks.com/aws/en/dev-tools/python-sql-connector#connection-class"},"https://docs.databricks.com/aws/en/dev-tools/python-sql-connector#connection-class")," and few other options"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'server_hostname: "<ws_id>.cloud.databricks.com"\nhttp_path: "/sql/1.0/warehouse/<warehouse_id>"\naccess_token: "<access_token>"\nauth_type: "<oauth>"\ncredentials_provider:\n  client_id: "<client_id>"\n  client_secret: "<client_secret>"\npassword: <password>\nusername: <username>\nsession_configuration: # Spark session configuration parameters\n  spark.sql.variable.substitute: true\nhttp_headers:\n  - !!python/tuple ["header_1", "value_1"]\n  - !!python/tuple ["header_2", "value_2"]\ncatalog: <catalog>\nschema: <schema>\nuse_cloud_fetch: false\nuser_agent_entry: "<application_name>"\nuse_inline_params: false\noauth_client_id: "<oauth_client_id>"\noauth_redirect_port: 443\n')),(0,r.kt)("h3",{id:"mysql"},"MySQL"),(0,r.kt)("p",null,"Allowed parameters in ",(0,r.kt)("a",{parentName:"p",href:"https://dev.mysql.com/doc/connector-python/en/connector-python-connectargs.html"},"https://dev.mysql.com/doc/connector-python/en/connector-python-connectargs.html")," and few other options"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'database: "<database>"\nuser: "<user>"\npassword: "<password>"\nhost: "<host>"\nport: 3306\n# ...others\n')),(0,r.kt)("h3",{id:"oracle"},"Oracle"),(0,r.kt)("p",null,"Allowed parameters in ",(0,r.kt)("inlineCode",{parentName:"p"},"oracledb/connection.py::connect")," of Python Oracle connector package ",(0,r.kt)("inlineCode",{parentName:"p"},"oracledb")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'user: "<user>"\npassword: "<password>"\nhost: "<host>"\nport: "<port>"\nservice_name: "<service_name>"\n# ...others\n')),(0,r.kt)("h3",{id:"postgres"},"Postgres"),(0,r.kt)("p",null,"Allowed parameters in ",(0,r.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-PARAMKEYWORDS"},"https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-PARAMKEYWORDS")," and few other options in ",(0,r.kt)("inlineCode",{parentName:"p"},"psycopg/connection.py::connect")," of ",(0,r.kt)("inlineCode",{parentName:"p"},"psycopg")," package"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'host: "<host>"\nport: "<port>"\ndbname: "<dbname>"\nuser: "<user>"\npassword: "<password>"\n# ...others\n')),(0,r.kt)("h3",{id:"snowflake"},"Snowflake"),(0,r.kt)("p",null,"Allowed parameters in ",(0,r.kt)("inlineCode",{parentName:"p"},"snowflake/connector/connection.py::DEFAULT_CONFIGURATION")," of ",(0,r.kt)("inlineCode",{parentName:"p"},"snowflake-connector-python")," package"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'user: "<user>"\npassword: "<password>"\ndatabase: "<database>"\nschema: "<schema>"\nwarehouse: "<warehouse>"\nrole: "<role>"\naccount: "<account>"\n# ...others\n')),(0,r.kt)("h3",{id:"sql-server"},"SQL Server"),(0,r.kt)("p",null,"Allowed parameters in ",(0,r.kt)("inlineCode",{parentName:"p"},"pymssql/_pymssql.pyi::connect")," of ",(0,r.kt)("inlineCode",{parentName:"p"},"pymssql")," package"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'server: "<server>"\nuser: "<user>"\npassword: "<password>"\ndatabase: "<database>"\n# ...others\n')),(0,r.kt)("h2",{id:"yaml-jinja-support"},"Yaml Jinja support"),(0,r.kt)("p",null,'The YAML config file supports the jinja templating language and has a custom function "env_var" to access environmental\nvariables. Jinja variables are unavailable and not yet loaded since they are supplied by the YAML file. Customisation of\nthe YAML file can only happen through values passed via environment variables.'),(0,r.kt)("h3",{id:"env_var"},"env_var"),(0,r.kt)("p",null,"Provides access to environmental variables. The function can be used two different ways."),(0,r.kt)("p",null,"Return the value of the environmental variable if it exists, otherwise return the default value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jinja"},"{{ env_var('<environmental_variable>', 'default') }}\n")),(0,r.kt)("p",null,"Return the value of the environmental variable if it exists, otherwise raise an error."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jinja"},"{{ env_var('<environmental_variable>') }}\n")),(0,r.kt)("h2",{id:"running-schemachange"},"Running schemachange"),(0,r.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"In order to run schemachange you must have the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"You will need to have a recent version of python 3 installed"),(0,r.kt)("li",{parentName:"ul"},"You will need to create the change history table used by schemachange in the database (\nsee ",(0,r.kt)("a",{parentName:"li",href:"#change-history-table"},"Change History Table")," above for more details)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"First, you will need to create a database/catalog to store your change history table (schemachange will not help you with\nthis)."),(0,r.kt)("li",{parentName:"ul"},"Second, you will need to create the change history schema and table. You can do this manually (\nsee ",(0,r.kt)("a",{parentName:"li",href:"#change-history-table"},"Change History Table")," above for the DDL) or have schemachange create them by running\nit with the ",(0,r.kt)("inlineCode",{parentName:"li"},"--create-change-history-table")," parameter (just make sure the user you're running\nschemachange with has privileges to create a schema and table in that database)"))),(0,r.kt)("li",{parentName:"ul"},"You will need to create (or choose) a user account that has privileges to apply the changes in your change script",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Don't forget that this user also needs the SELECT and INSERT privileges on the change history table")))),(0,r.kt)("h3",{id:"running-the-script"},"Running the Script"),(0,r.kt)("p",null,"schemachange is a single python script located at ",(0,r.kt)("inlineCode",{parentName:"p"},"schemachange/cli.py"),". It can be executed as\nfollows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"python -m schemachange.cli [subcommand] [-h] \\\n  [--config-folder CONFIG_FOLDER] \\\n  [--config-file-name CONFIG_FILE_NAME] \\\n  [-f ROOT_FOLDER] \\\n  [-m MODULES_FOLDER] \\\n  [--vars VARS] \\\n  [--db-type DB_TYPE] \\\n  [--connections-file-path CONNECTIONS_FILE_PATH] \\\n  [-c CHANGE_HISTORY_TABLE] \\\n  [--create-change-history-table] \\\n  [--query-tag QUERY_TAG] \\\n  [-v] \\\n  [-ac] \\\n  [--dry-run]\n")),(0,r.kt)("p",null,"Or if installed via ",(0,r.kt)("inlineCode",{parentName:"p"},"pip"),", it can be executed as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# Build library from source\npip install --upgrade build\npip install --upgrade -r requirements.txt\npython -m build\npip install dist/db_schemachange-*-py3-none-any.whl\n\n# Or install via PyPI\npip install --upgrade "db-schemachange[all]" # Install the package with all connectors\npip install --upgrade "db-schemachange[databricks]" # Or install the package with specific connector\n\n# Run the command\nschemachange [subcommand] [-h] \\\n  [--config-folder CONFIG_FOLDER] \\\n  [--config-file-name CONFIG_FILE_NAME] \\\n  [-f ROOT_FOLDER] \\\n  [-m MODULES_FOLDER] \\\n  [--vars VARS] \\\n  [--db-type DB_TYPE] \\\n  [--connections-file-path CONNECTIONS_FILE_PATH] \\\n  [-c CHANGE_HISTORY_TABLE] \\\n  [--create-change-history-table] \\\n  [--query-tag QUERY_TAG] \\\n  [-v] \\\n  [-ac] \\\n  [--dry-run]\n')),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Make sure you've completed the ",(0,r.kt)("a",{parentName:"li",href:"#prerequisites"},"Prerequisites")," steps above"),(0,r.kt)("li",{parentName:"ol"},"Get a copy of this schemachange repository (either via a clone or download)"),(0,r.kt)("li",{parentName:"ol"},"Open a shell and change directory to your copy of the schemachange repository"),(0,r.kt)("li",{parentName:"ol"},"Run schemachange (see ",(0,r.kt)("a",{parentName:"li",href:"#running-the-script"},"Running the Script")," above) with your database connection details and\nrespective demo project as the root folder (make sure you use the full path)")),(0,r.kt)("h3",{id:"using-docker"},"Using Docker"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'docker run -it --rm \\\n  --name schemachange-script \\\n  -v "$PWD":/usr/src/schemachange \\\n  -w /usr/src/schemachange \\\n  python:3 /bin/bash -c "pip install --upgrade \'db-schemachange[all]\' && schemachange [subcommand] [-h] [--config-folder CONFIG_FOLDER] [--config-file-name CONFIG_FILE_NAME] [-f ROOT_FOLDER] [-m MODULES_FOLDER] [--vars VARS] [--db-type DB_TYPE] [--connections-file-path CONNECTIONS_FILE_PATH] [-c CHANGE_HISTORY_TABLE] [--create-change-history-table] [--query-tag QUERY_TAG] [-v] [-ac] [--dry-run]"\n')),(0,r.kt)("h2",{id:"maintainers"},"Maintainers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Lam Tran (@LTranData)")),(0,r.kt)("h2",{id:"demo"},"Demo"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'schemachange deploy \\\n  --verbose \\\n  --vars \'{"secret":"abc"}\' \\\n  --connections-file-path demo/mysql/config/connections-config.yml \\\n  --config-folder demo/mysql/config \\\n  --root-folder demo/mysql/scripts \\\n  --db-type MYSQL \\\n  --create-change-history-table\n')),(0,r.kt)("h2",{id:"github"},"GitHub"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://github.com/LTranData/db-schemachange"},"https://github.com/LTranData/db-schemachange"))))}d.isMDXComponent=!0},1494:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/flyway-naming-convention-a318530d1f6a49d3e46235d474ed3281.png"},3156:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/flyway-repeatable-naming-convention-2c0a63b544c98fb2dd7660062194d8c4.png"}}]);